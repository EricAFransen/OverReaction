{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww21340\viewh14980\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf0 \expnd0\expndtw0\kerning0
using System;\
using System.Collections.Generic;\
\
namespace StochasticReactionTest\
\{\
    class Program\
    \{\
        public enum Species\
        \{\
            Red = 0, Blue = 1, x1 = 2, x2 = 3, x3 = 4\
        \};\
\
        static readonly int SPECIES_NUM = 5;\
\
        static void Main(string[] args)\
        \{\
            List<ChemicalReaction> reactions = new List<ChemicalReaction>();\
\
            //Red, blue, x1, x2, x3\
            int[] liveSpecies = \{ 10, 10, 0, 0, 0 \};\
            InitReactions(reactions, liveSpecies);\
            \
            int[,] updateMatrix = UpdateMatrix(reactions);\
            double time = 0.0;\
            double endTime = 10.0;\
\
            Random rand = new Random();\
\
            Console.WriteLine("Species Count:");\
            Console.WriteLine("Red: " + liveSpecies[(int)Species.Red]);\
            Console.WriteLine("Blue: " + liveSpecies[(int)Species.Blue]);\
            Console.WriteLine("x1: " + liveSpecies[(int)Species.x1]);\
            Console.WriteLine("x2: " + liveSpecies[(int)Species.x2]);\
            Console.WriteLine("x3: " + liveSpecies[(int)Species.x3]);\
            Console.WriteLine();\
\
            \
\
           \
\
            while (time < endTime)\
            \{\
                int totalRate = CalculateTotalRate(reactions);\
\
                MathNet.Numerics.Distributions.Normal normalDist = new MathNet.Numerics.Distributions.Normal((1 / totalRate), 1.5);\
                int next = WeightedRandom(reactions, rand, totalRate);\
\
                if(reactions[next].RateExpression() > 0)\
                \{\
                    time += Math.Abs(normalDist.Sample())/2;\
                    for (int i = 0; i < SPECIES_NUM; i++)\
                    \{\
                        liveSpecies[i] = liveSpecies[i] + updateMatrix[next, i];\
                    \}\
\
                    Console.WriteLine("At time " + time + " ms the reaction: " + reactions[next].Equation() + " occurred");\
                    Console.WriteLine("Species Count:");\
                    Console.WriteLine("Red: " + liveSpecies[(int)Species.Red]);\
                    Console.WriteLine("Blue: " + liveSpecies[(int)Species.Blue]);\
                    Console.WriteLine("x1: " + liveSpecies[(int)Species.x1]);\
                    Console.WriteLine("x2: " + liveSpecies[(int)Species.x2]);\
                    Console.WriteLine("x3: " + liveSpecies[(int)Species.x3]);\
                    Console.WriteLine();\
                \}\
            \}\
            Console.ReadLine();\
        \}\
\
        static int CalculateTotalRate(List<ChemicalReaction> reactions)\
        \{\
            int totalRate = 0;\
\
            foreach (ChemicalReaction r in reactions)\
            \{\
                totalRate += r.RateExpression();\
            \}\
\
            return totalRate;\
        \}\
\
        static int WeightedRandom(List<ChemicalReaction> reactions, Random rand, double totalRate)\
        \{\
            double choice = 0.0;\
\
            double roll = rand.NextDouble();\
\
            for (int i = 0; i < reactions.Count; i++)\
            \{\
                //P(reaction[i]) = rate of formation / total rate of formation\
                //E.X. P(Red + Blue -> x1) = |Red|*|Blue|*k / Rtot\
                choice += (reactions[i].RateExpression() / totalRate);\
\
                if(roll < choice)\
                \{\
                    return i;\
                \}\
            \}\
\
            return 0;\
        \}\
\
        static int[,] UpdateMatrix(List<ChemicalReaction> reactions)\
        \{\
            int[,] retMatrix = new int[reactions.Count, SPECIES_NUM];\
\
            for(int i = 0; i < reactions.Count; i++)\
            \{\
                ChemicalReaction chem = reactions[i];\
                for(int j = 0; j < chem.Reactants.Length; j++)\
                \{\
                    retMatrix[i, j] -= chem.Reactants[j] * chem.Rate;\
                \}\
\
                for(int j = 0; j <chem.Products.Length; j++)\
                \{\
                    retMatrix[i, j] += chem.Products[j] * chem.Rate;\
                \}\
            \}\
\
            return retMatrix;\
        \}\
\
        static void InitReactions(List<ChemicalReaction> reactions, int[] species)\
        \{\
            //Red + Blue -> x1;\
            reactions.Add(new ChemicalReaction(new int[] \{ 1, 1, 0, 0, 0 \}, new int[] \{ 0, 0, 1, 0, 0 \}, 1, species));\
\
            //x1 -> Red + Blue\
            reactions.Add(new ChemicalReaction(new int[] \{ 0, 0, 1, 0, 0 \}, new int[] \{ 1, 1, 0, 0, 0 \}, 1, species));\
\
            //x1 -> Red + x2;\
            reactions.Add(new ChemicalReaction(new int[] \{ 0, 0, 1, 0, 0 \}, new int[] \{ 1, 0, 0, 1, 0 \}, 1, species));\
        \}\
\
        class ChemicalReaction\
        \{\
            int[] reactants, products, numSpecies;\
            int rate;\
\
            public ChemicalReaction(int[] givenReactants, int[] givenProducts, int givenRate, int[] givenNumSpecies)\
            \{\
                Reactants = givenReactants;\
                products = givenProducts;\
                rate = givenRate;\
                numSpecies = givenNumSpecies;\
            \}\
\
            public int RateExpression()\
            \{\
                int retVal = rate;\
                for(int i = 0; i < reactants.Length; i++)\
                \{\
                    if(reactants[i] > 0)\
                    \{\
                        retVal *= numSpecies[i];\
                    \}\
                \}\
                return retVal;\
            \}\
\
            public string Equation()\
            \{\
                string ret = "";\
\
                ret += "" + reactants[0] + "Red + ";\
                ret += "" + reactants[1] + "Blue + ";\
                ret += "" + reactants[2] + "x1 + ";\
                ret += "" + reactants[3] + "x2 + ";\
                ret += "" + reactants[4] + "x3";\
                ret += " -" + rate +"> ";\
\
                ret += "" + products[0] + "Red + ";\
                ret += "" + products[1] + "Blue + ";\
                ret += "" + products[2] + "x1 + ";\
                ret += "" + products[3] + "x2 + ";\
                ret += "" + products[4] + "x3";\
\
                return ret;\
            \}\
\
            public int[] Reactants \{ get => reactants; set => reactants = value; \}\
            public int Rate \{ get => rate; set => rate = value; \}\
            public int[] Products \{ get => products; set => products = value; \}\
        \}\
    \}\
\}}